#pragma kernel DecodeYCbCr
#pragma kernel DecodeOcclusion

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.github.asus4.arfoundationreplay/Resources/Shaders/Common.hlsl"

// Common
int2 _TextureSize;
Texture2D<float4> _InputTexture;
SamplerState linearClampSampler;

// For DecodeYCbCr
RWTexture2D<float> _textureY;
RWTexture2D<float2> _textureCbCr;

// For DecodeOcclusion
RWTexture2D<float> _HumanStencil;
RWTexture2D<float> _HumanDepth;
RWTexture2D<float> _EnvironmentDepth;
float2 _DepthRange;

// Inverse matrix of s_YCbCrToSRGB
static const float4x4 s_SRGBToYCbCr = float4x4(
    0.298993, 0.587016, 0.1139911, 2.112563E-08,
    -0.1687319, -0.3312732, 0.5000051, 0.5000001,
    0.5000051, -0.4186991, -0.08130606, 0.5000001,
    0.0, 0.0, 0.0, 1.0
);

[numthreads(8,8,1)]
void DecodeYCbCr (uint2 id : SV_DispatchThreadID)
{
    float2 uv = (float2)id / (float2)_TextureSize;

    float2 dx = float2(1.0 / _TextureSize.x, 0);
    float2 dy = float2(0, -1.0 / _TextureSize.y);
    
    float2 uv_c = UV_ColorToFull(uv);
    float4 rgb = _InputTexture.SampleGrad(linearClampSampler, uv_c, dx, dy);
#ifndef UNITY_COLORSPACE_GAMMA
    rgb.xyz = FastLinearToSRGB(rgb.xyz);
#endif
    float4 ycbcr = mul(s_SRGBToYCbCr, rgb);
    _textureY[id] = ycbcr.r;
    _textureCbCr[id] = ycbcr.gb;
}

[numthreads(8,8,1)]
void DecodeOcclusion (uint2 id : SV_DispatchThreadID)
{
    float2 uv = (float2)id / (float2)_TextureSize;
    
    float2 dx = float2(1.0 / _TextureSize.x, 0);
    float2 dy = float2(0, -1.0 / _TextureSize.y);

    float2 uv_s = UV_StencilToFull(uv);
    float2 uv_d = UV_DepthToFull(uv);
    float4 rgb_human = _InputTexture.SampleGrad(linearClampSampler, uv_s, dx, dy);
    float4 rgb_depth = _InputTexture.SampleGrad(linearClampSampler, uv_d, dx, dy);
#ifndef UNITY_COLORSPACE_GAMMA
    rgb_human.xyz = FastLinearToSRGB(rgb_human.xyz);
    rgb_depth.xyz = FastLinearToSRGB(rgb_depth.xyz);
#endif
    _HumanStencil[id] = RGB2Brightness(rgb_human.rgb);
    _HumanDepth[id] = DecodeDepth(rgb_human.rgb, _DepthRange);
    _EnvironmentDepth[id] = DecodeDepth(rgb_depth.rgb, _DepthRange);
}
